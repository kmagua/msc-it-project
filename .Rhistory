fourfoldplot(confusion_matrix)
dev.off()
#Save the merged training and test data to a file for current fold
train.data$type <- 'train'
test.data$type <- 'test'
write.csv(rbind(train.data, test.data), file = paste("./10-fold-data/",i , " - fold.csv"),row.names=FALSE)
pbar$step()
}
n <- names(data)
f <- as.formula(paste("classnotckd ~", paste(n[!n %in% "classnotckd"], collapse = " + ")))
set.seed(769)
rows <- sample(nrow(data))
data <- data[rows, ]
write.csv(data, file = "randomized_records.csv",row.names=FALSE)
k <- 6
pbar <- create_progress_bar('text')
pbar$init(k)
set.seed(897)
folding <- crossv_kfold(data,k)
confusion_matrix <- NULL
for(i in 1:k){
train.data <- as.data.frame(folding$train[[i]])
test.data <- as.data.frame(folding$test[[i]])
table(train.data$classnotckd)
nn <- neuralnet(f, data=train.data, hidden=c(5,4), linear.output = T)
plot(nn)
dev.off()
#Test the model
pr.nn <- compute(nn,test.data[,1:25])
#Confusion Matrix & Classification error. Saved as png
prediction <- pr.nn$net.result
classified_prediction <- ifelse(prediction>0.5,'No CKD','CKD')
test_data <- ifelse(test.data$classnotckd == 1, 'No CKD','CKD')
cm <- confusionMatrix(factor(classified_prediction), factor(test_data))
confusion_matrix <- as.table(cm)
png(file = paste("./10-fold-data/fold",i , " confusion matrix.png"))
fourfoldplot(confusion_matrix)
dev.off()
#Save the merged training and test data to a file for current fold
train.data$type <- 'train'
test.data$type <- 'test'
write.csv(rbind(train.data, test.data), file = paste("./10-fold-data/",i , " - fold.csv"),row.names=FALSE)
pbar$step()
}
n <- names(data)
f <- as.formula(paste("classnotckd ~", paste(n[!n %in% "classnotckd"], collapse = " + ")))
set.seed(769)
rows <- sample(nrow(data))
data <- data[rows, ]
write.csv(data, file = "randomized_records.csv",row.names=FALSE)
k <- 6
pbar <- create_progress_bar('text')
pbar$init(k)
set.seed(897)
folding <- crossv_kfold(data,k)
confusion_matrix <- NULL
for(i in 1:k){
train.data <- as.data.frame(folding$train[[i]])
test.data <- as.data.frame(folding$test[[i]])
table(train.data$classnotckd)
nn <- neuralnet(f, data=train.data, hidden=c(5,4), linear.output = T)
png(file = paste("./10-fold-data/fold - ",i , " model.png"))
print(plot(nn))
dev.off()
#Test the model
pr.nn <- compute(nn,test.data[,1:25])
#Confusion Matrix & Classification error. Saved as png
prediction <- pr.nn$net.result
classified_prediction <- ifelse(prediction>0.5,'No CKD','CKD')
test_data <- ifelse(test.data$classnotckd == 1, 'No CKD','CKD')
cm <- confusionMatrix(factor(classified_prediction), factor(test_data))
confusion_matrix <- as.table(cm)
png(file = paste("./10-fold-data/fold",i , " confusion matrix.png"))
fourfoldplot(confusion_matrix)
dev.off()
#Save the merged training and test data to a file for current fold
train.data$type <- 'train'
test.data$type <- 'test'
write.csv(rbind(train.data, test.data), file = paste("./10-fold-data/",i , " - fold.csv"),row.names=FALSE)
pbar$step()
}
n <- names(data)
f <- as.formula(paste("classnotckd ~", paste(n[!n %in% "classnotckd"], collapse = " + ")))
set.seed(769)
rows <- sample(nrow(data))
data <- data[rows, ]
write.csv(data, file = "randomized_records.csv",row.names=FALSE)
k <- 6
pbar <- create_progress_bar('text')
pbar$init(k)
set.seed(897)
folding <- crossv_kfold(data,k)
confusion_matrix <- NULL
for(i in 1:k){
train.data <- as.data.frame(folding$train[[i]])
test.data <- as.data.frame(folding$test[[i]])
table(train.data$classnotckd)
nn <- neuralnet(f, data=train.data, hidden=c(5,4), linear.output = T)
#png(file = paste("./10-fold-data/fold - ",i , " model.png"))
#print(plot(nn))
#dev.off()
#Test the model
pr.nn <- compute(nn,test.data[,1:25])
#Confusion Matrix & Classification error. Saved as png
prediction <- pr.nn$net.result
classified_prediction <- ifelse(prediction>0.5,'No CKD','CKD')
test_data <- ifelse(test.data$classnotckd == 1, 'No CKD','CKD')
cm <- confusionMatrix(factor(classified_prediction), factor(test_data))
confusion_matrix <- as.table(cm)
png(file = paste("./10-fold-data/fold",i , " confusion matrix.png"))
fourfoldplot(confusion_matrix)
dev.off()
#Save the merged training and test data to a file for current fold
train.data$type <- 'train'
test.data$type <- 'test'
write.csv(rbind(train.data, test.data), file = paste("./10-fold-data/",i , " - fold.csv"),row.names=FALSE)
pbar$step()
}
n <- names(data)
f <- as.formula(paste("classnotckd ~", paste(n[!n %in% "classnotckd"], collapse = " + ")))
set.seed(769)
rows <- sample(nrow(data))
data <- data[rows, ]
write.csv(data, file = "randomized_records.csv",row.names=FALSE)
k <- 6
pbar <- create_progress_bar('text')
pbar$init(k)
set.seed(897)
folding <- crossv_kfold(data,k)
confusion_matrix <- NULL
for(i in 1:k){
train.data <- as.data.frame(folding$train[[i]])
test.data <- as.data.frame(folding$test[[i]])
table(train.data$classnotckd)
nn <- neuralnet(f, data=train.data, hidden=c(5,4), linear.output = T)
#png(file = paste("./10-fold-data/fold - ",i , " model.png"))
#print(plot(nn))
#dev.off()
#Test the model
pr.nn <- compute(nn,test.data[,1:25])
#Confusion Matrix & Classification error. Saved as png
prediction <- pr.nn$net.result
classified_prediction <- ifelse(prediction>0.5,'No CKD','CKD')
test_data <- ifelse(test.data$classnotckd == 1, 'No CKD','CKD')
cm <- confusionMatrix(factor(classified_prediction), factor(test_data))
confusion_matrix <- as.table(cm)
png(file = paste("./10-fold-data/fold",i , " confusion matrix.png"))
fourfoldplot(confusion_matrix)
dev.off()
#Save the merged training and test data to a file for current fold
train.data$type <- 'train'
test.data$type <- 'test'
write.csv(rbind(train.data, test.data), file = paste("./10-fold-data/",i , " - fold.csv"),row.names=FALSE)
pbar$step()
}
cor(data)
res <- cor(data)
round(res, 2)
library(xlsx)
install.packages('xlsx')
library(xlsx)
res <- cor(data)
write.table(round(res, 2), file='./images/my_data.txt')
res <- cor(data)
write.table(round(res, 2), file='./images/my_data.txt', sep="\t")
correlation <- read.csv('attributes_correlation.txt')
correlation
correlation[correlation$classnotckd <= 0.60, ]
str(correlation[correlation$classnotckd <= 0.60, ])
x = 10
x <- 10
y <- 10
se <- function(x, y){ if(x >9 && y<12){ return x* y } return 0  }
se <- function(x, y){ if(x >9){ return x* y } return 0  }
se <- function(x, y){ if(x >9 && y<12){ return x* y } return 0  }
subset(correlation, select = c('X', 'classnotckd'))
#get the name of attributes with correlation <= 60
features <- subset(correlation, select=c('X', 'classnotckd'))
features
?subset
#get the name of attributes with correlation <= 60
features <- subset(correlation, select=c('X>0.5', 'classnotckd'))
#get the name of attributes with correlation <= 60
features <- subset(correlation, select=c('X', 'classnotckd'))
#get the name of attributes with correlation <= 60
features <- subset(correlation, classnotckd >0.5)
features
#get the name of attributes with correlation <= 60
features <- subset(correlation, abs(classnotckd) >0.5)
features
str(features)
filtered <- correlation$classnotckd <= 6
filtered
correlation[correlation$classnotckd <=0.6 0., ]
#filter by
correlation[correlation$classnotckd <=0.6, ]
#filter by
str(correlation[correlation$classnotckd <=0.6, ])
abs(-2)
str(correlation[abs(correlation$classnotckd) <=0.6, ])
#filter by
correlation[abs(correlation$classnotckd) <=0.6, ]
features <- correlation[abs(correlation$classnotckd) <=0.6, ]
#filter out those whose absolute correlation with the outcome variable >60
features <- factor(correlation[abs(correlation$classnotckd) <=0.6, ]$X)
features
c('hshd','fgffgf','fggffd')
new_data <- subset(data, features)
new_data <- subset(data, select=features)
new_data
str(new_data)
features
str(data)
#filter out those whose absolute correlation with the outcome variable >60
features <- c(correlation[abs(correlation$classnotckd) <=0.6, ]$X)
new_data <- subset(data, select=features)
new_data
str(new_data)
features
correlation[abs(correlation$classnotckd) <=0.6, ]
#filter out those whose absolute correlation with the outcome variable >60
features <- factor(correlation[abs(correlation$classnotckd) <=0.6, ]$X)
features
data$features
paste(features[!features %in% "classnotckd"], collapse = ", ")
paste(features[!features %in% "classnotckd"], collapse = '","')
v <- paste(features[!features %in% "classnotckd"], collapse = '","')
v <- c(paste(features[!features %in% "classnotckd"], collapse = '","'))
v
?paste
v <- c(paste(features[!features %in% "classnotckd"],sep="", collapse = ','))
v
v <- c(paste(features[!features %in% "classnotckd"],sep="", collapse = "","))
v <- c(paste(features[!features %in% "classnotckd"],sep="", collapse = ","))
v
features
c('h','k')
subset(data, features)
subset(data, select = features)
?subset
subset(data, select = c('age','bp','su','rbcabnormal','rbcnormal','pccpresent', 'bapresent','bgr','pot',         'wc', 'cadyes',      'appetpoor',   'aneyes'))
features <- name(correlation[abs(correlation$classnotckd) <=0.6, ]$X)
#filter out those whose absolute correlation with the outcome variable >60
features <- names(correlation[abs(correlation$classnotckd) <=0.6, ]$X)
features
#filter out those whose absolute correlation with the outcome variable >60
features <- correlation[abs(correlation$classnotckd) <=0.6, ]$X
features
str(features)
#filter out those whose absolute correlation with the outcome variable >60
features <- correlation[abs(correlation$classnotckd) <=0.6, ]
str(features$X)
correlation <- read.csv('attributes_correlation.txt')
correlation
correlation$X
#filter out those whose absolute correlation with the outcome variable >60
features <- factor(correlation[abs(correlation$classnotckd) <=0.6, ])$X
features <- factor(correlation[abs(correlation$classnotckd) <=0.6, ])$X
correlation[abs(correlation$classnotckd) <=0.6, X]
#filter out those whose absolute correlation with the outcome variable >60
features <- correlation[abs(correlation$classnotckd) <=0.6, 1]
features
str(features)
summary(features)
#filter out those whose absolute correlation with the outcome variable >60
features <- correlation[abs(correlation$classnotckd) <=0.6, 1] == 1
features
#filter out those whose absolute correlation with the outcome variable >60
features <- correlation[correlation[abs(correlation$classnotckd) <=0.6, 1],]
features
str(features)
#filter out those whose absolute correlation with the outcome variable >60
features <- correlation[correlation[abs(correlation$classnotckd) <=0.6, 1],1]
str(features)
?vector
features <- correlation[abs(correlation$classnotckd) <=0.6, 1]
features
as.vector(features)
features <- correlation[abs(correlation$classnotckd) <=0.6, 1]
new_data <- subset(data, select=as.vector(features))
new_data
fit_model <- function(k, folding){
for(i in 1:k){
train.data <- as.data.frame(folding$train[[i]])
test.data <- as.data.frame(folding$test[[i]])
table(train.data$classnotckd)
nn <- neuralnet(f, data=train.data, hidden=c(5,4), linear.output = T)
#png(file = paste("./imagesfold - ",i , " model.png"))
#print(plot(nn))
#dev.off()
#Test the model
pr.nn <- compute(nn,test.data[,1:25])
#Confusion Matrix & Classification error. Saved as png
prediction <- pr.nn$net.result
classified_prediction <- ifelse(prediction>0.5,'No CKD','CKD')
test_data <- ifelse(test.data$classnotckd == 1, 'No CKD','CKD')
cm <- confusionMatrix(factor(classified_prediction), factor(test_data))
confusion_matrix <- as.table(cm)
png(file = paste("./images/fold",i , " confusion matrix.png"))
fourfoldplot(confusion_matrix)
dev.off()
#Save the merged training and test data to a file for current fold
train.data$type <- 'train'
test.data$type <- 'test'
write.csv(rbind(train.data, test.data), file = paste("./10-fold-data/",i , " - fold.csv"),row.names=FALSE)
pbar$step()
}
}
features <- as.vector(features) + 'classnotckd'
?pushBack
features <- as.vector(features)
features
append(features, 'classnotckd')
new_data <- subset(data, select=append(features, 'classnotckd'))
str(new_data)
data < read.csv('randomized_records.csv')
correlation <- read.csv('attributes_correlation.txt')
features <- correlation[abs(correlation$classnotckd) <=0.6, 1]
features <- as.vector(features)
new_data <- subset(data, select=append(features, 'classnotckd'))
#
attribute_labels <- names(new_data)
f <- as.formula(paste("classnotckd ~", paste(attribute_labels[!attribute_labels %in% "classnotckd"], collapse = " + ")))
k <- 6
pbar <- create_progress_bar('text')
pbar$init(k)
set.seed(897)
folding <- crossv_kfold(new_data,k)
confusion_matrix <- NULL
fit_model(k,folding, 'Correlation less than 60')
data < read.csv('randomized_records.csv')
correlation <- read.csv('attributes_correlation.txt')
features <- correlation[abs(correlation$classnotckd) <=0.6, 1]
features <- as.vector(features)
new_data <- subset(data, select=append(features, 'classnotckd'))
#
attribute_labels <- names(new_data)
f <- as.formula(paste("classnotckd ~", paste(attribute_labels[!attribute_labels %in% "classnotckd"], collapse = " + ")))
k <- 6
pbar <- create_progress_bar('text')
pbar$init(k)
set.seed(897)
folding <- crossv_kfold(new_data,k)
confusion_matrix <- NULL
fit_model(k,folding, 'Correlation less than 60')
fit_model <- function(k, folding, scene){
for(i in 1:k){
train.data <- as.data.frame(folding$train[[i]])
test.data <- as.data.frame(folding$test[[i]])
table(train.data$classnotckd)
nn <- neuralnet(f, data=train.data, hidden=c(5,4), linear.output = T)
#png(file = paste("./images/fold - ",i , scene , " model.png"))
#print(plot(nn))
#dev.off()
#Test the model
pr.nn <- compute(nn,test.data[,1:25])
#Confusion Matrix & Classification error. Saved as png
prediction <- pr.nn$net.result
classified_prediction <- ifelse(prediction>0.5,'No CKD','CKD')
test_data <- ifelse(test.data$classnotckd == 1, 'No CKD','CKD')
cm <- confusionMatrix(factor(classified_prediction), factor(test_data))
confusion_matrix <- as.table(cm)
png(file = paste("./images/fold ",i , scene , " confusion matrix.png"))
fourfoldplot(confusion_matrix)
dev.off()
#Save the merged training and test data to a file for current fold
train.data$type <- 'train'
test.data$type <- 'test'
write.csv(rbind(train.data, test.data), file = paste("./10-fold-data/",i , scene , " - fold.csv"),row.names=FALSE)
pbar$step()
}
}
data < read.csv('randomized_records.csv')
correlation <- read.csv('attributes_correlation.txt')
features <- correlation[abs(correlation$classnotckd) <=0.6, 1]
features <- as.vector(features)
new_data <- subset(data, select=append(features, 'classnotckd'))
#
attribute_labels <- names(new_data)
f <- as.formula(paste("classnotckd ~", paste(attribute_labels[!attribute_labels %in% "classnotckd"], collapse = " + ")))
k <- 6
pbar <- create_progress_bar('text')
pbar$init(k)
set.seed(897)
folding <- crossv_kfold(new_data,k)
confusion_matrix <- NULL
fit_model(k,folding, 'Correlation less than 60')
ncols(new_data)
ncol(new_data)
ncol(new_data) - 1
fit_model <- function(k, folding, scene){
for(i in 1:k){
train.data <- as.data.frame(folding$train[[i]])
test.data <- as.data.frame(folding$test[[i]])
n_cols <- ncol(train.data) - 1
columns[i] <- n_cols
table(train.data$classnotckd)
nn <- neuralnet(f, data=train.data, hidden=c(5,4), linear.output = T)
#png(file = paste("./images/fold - ",i , scene , " model.png"))
#print(plot(nn))
#dev.off()
#Test the model
pr.nn <- compute(nn,test.data[,1:n_cols])
#Confusion Matrix & Classification error. Saved as png
prediction <- pr.nn$net.result
classified_prediction <- ifelse(prediction>0.5,'No CKD','CKD')
test_data <- ifelse(test.data$classnotckd == 1, 'No CKD','CKD')
cm <- confusionMatrix(factor(classified_prediction), factor(test_data))
confusion_matrix <- as.table(cm)
png(file = paste("./images/fold ",i , scene , " confusion matrix.png"))
fourfoldplot(confusion_matrix)
dev.off()
#Save the merged training and test data to a file for current fold
train.data$type <- 'train'
test.data$type <- 'test'
write.csv(rbind(train.data, test.data), file = paste("./10-fold-data/",i , scene , " - fold.csv"),row.names=FALSE)
pbar$step()
}
}
data < read.csv('randomized_records.csv')
correlation <- read.csv('attributes_correlation.txt')
features <- correlation[abs(correlation$classnotckd) <=0.6, 1]
features <- as.vector(features)
new_data <- subset(data, select=append(features, 'classnotckd'))
#
attribute_labels <- names(new_data)
f <- as.formula(paste("classnotckd ~", paste(attribute_labels[!attribute_labels %in% "classnotckd"], collapse = " + ")))
k <- 6
pbar <- create_progress_bar('text')
pbar$init(k)
set.seed(897)
folding <- crossv_kfold(new_data,k)
confusion_matrix <- NULL
fit_model(k,folding, 'Correlation less than 60')
fit_model <- function(k, folding, scene, columns){
for(i in 1:k){
train.data <- as.data.frame(folding$train[[i]])
test.data <- as.data.frame(folding$test[[i]])
n_cols <- ncol(train.data) - 1
columns[i] <- n_cols
table(train.data$classnotckd)
nn <- neuralnet(f, data=train.data, hidden=c(5,4), linear.output = T)
#png(file = paste("./images/fold - ",i , scene , " model.png"))
#print(plot(nn))
#dev.off()
#Test the model
pr.nn <- compute(nn,test.data[,1:n_cols])
#Confusion Matrix & Classification error. Saved as png
prediction <- pr.nn$net.result
classified_prediction <- ifelse(prediction>0.5,'No CKD','CKD')
test_data <- ifelse(test.data$classnotckd == 1, 'No CKD','CKD')
cm <- confusionMatrix(factor(classified_prediction), factor(test_data))
confusion_matrix <- as.table(cm)
png(file = paste("./images/fold ",i , scene , " confusion matrix.png"))
fourfoldplot(confusion_matrix)
dev.off()
#Save the merged training and test data to a file for current fold
train.data$type <- 'train'
test.data$type <- 'test'
write.csv(rbind(train.data, test.data), file = paste("./10-fold-data/",i , scene , " - fold.csv"),row.names=FALSE)
pbar$step()
}
}
data < read.csv('randomized_records.csv')
correlation <- read.csv('attributes_correlation.txt')
features <- correlation[abs(correlation$classnotckd) <=0.6, 1]
features <- as.vector(features)
new_data <- subset(data, select=append(features, 'classnotckd'))
#
attribute_labels <- names(new_data)
f <- as.formula(paste("classnotckd ~", paste(attribute_labels[!attribute_labels %in% "classnotckd"], collapse = " + ")))
k <- 6
pbar <- create_progress_bar('text')
pbar$init(k)
set.seed(897)
folding <- crossv_kfold(new_data,k)
confusion_matrix <- NULL
fit_model(k,folding, 'Correlation less than 60', NULL)
columns
data < read.csv('randomized_records.csv')
correlation <- read.csv('attributes_correlation.txt')
features <- correlation[abs(correlation$classnotckd) <=0.6, 1]
features <- as.vector(features)
new_data <- subset(data, select=append(features, 'classnotckd'))
#
attribute_labels <- names(new_data)
f <- as.formula(paste("classnotckd ~", paste(attribute_labels[!attribute_labels %in% "classnotckd"], collapse = " + ")))
k <- 6
pbar <- create_progress_bar('text')
pbar$init(k)
set.seed(897)
folding <- crossv_kfold(new_data,k)
confusion_matrix <- NULL
fit_model(k,folding, 'Correlation less than 60', columns)
#XXXXXXXXXXXXXXXX The CUSTOM MODEL FITTING FUNCTION XXXXXXXXXXXXXXXXXXXXX
columns <- NULL
data < read.csv('randomized_records.csv')
correlation <- read.csv('attributes_correlation.txt')
features <- correlation[abs(correlation$classnotckd) <=0.6, 1]
features <- as.vector(features)
new_data <- subset(data, select=append(features, 'classnotckd'))
#
attribute_labels <- names(new_data)
f <- as.formula(paste("classnotckd ~", paste(attribute_labels[!attribute_labels %in% "classnotckd"], collapse = " + ")))
k <- 6
pbar <- create_progress_bar('text')
pbar$init(k)
set.seed(897)
folding <- crossv_kfold(new_data,k)
confusion_matrix <- NULL
fit_model(k,folding, 'Correlation less than 60', columns)
columns
