index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
f <- as.formula(paste("classnotckd ~", paste(train.cv[!train.cv %in% "classnotckd"], collapse = " + ")))
nn <- neuralnet(f,train.cv,hidden=c(5,2),linear.output=T)
#pr.nn <- compute(nn,test.cv[,1:25])
#pr.nn <- pr.nn$net.result*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
#test.cv.r <- (test.cv$medv)*(max(data$medv)-min(data$medv))+min(data$medv)
#cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
pbar$step()
}
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
f <- as.formula(paste("classnotckd ~", paste(train.cv[!train.cv %in% "classnotckd"], collapse = " + ")))
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
#pr.nn <- compute(nn,test.cv[,1:25])
#pr.nn <- pr.nn$net.result*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
#test.cv.r <- (test.cv$medv)*(max(data$medv)-min(data$medv))+min(data$medv)
#cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
pbar$step()
}
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
f <- as.formula(paste("classnotckd ~", paste(n[!n %in% "classnotckd"], collapse = " + ")))
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
#pr.nn <- compute(nn,test.cv[,1:25])
#pr.nn <- pr.nn$net.result*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
#test.cv.r <- (test.cv$medv)*(max(data$medv)-min(data$medv))+min(data$medv)
#cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
pbar$step()
}
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
f <- as.formula(paste("classnotckd ~", paste(n[!n %in% "classnotckd"], collapse = " + ")))
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:25])
pr.nn <- pr.nn$net.result*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
#test.cv.r <- (test.cv$medv)*(max(data$medv)-min(data$medv))+min(data$medv)
#cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
pbar$step()
}
library(neuralnet)
#boot is used for crossvalidation
library(boot)
set.seed(769)
cv.error <- NULL
k <- 10
library(plyr)
pbar <- create_progress_bar('text')
pbar$init(k)
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
f <- as.formula(paste("classnotckd ~", paste(n[!n %in% "classnotckd"], collapse = " + ")))
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:25])
pr.nn <- pr.nn$net.result*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
test.cv.r <- (test.cv$medv)*(max(data$medv)-min(data$medv))+min(data$medv)
cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
pbar$step()
}
mean(cv.error)
library(neuralnet)
#boot is used for crossvalidation
library(boot)
set.seed(769)
cv.error <- NULL
k <- 10
library(plyr)
pbar <- create_progress_bar('text')
pbar$init(k)
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
f <- as.formula(paste("classnotckd ~", paste(n[!n %in% "classnotckd"], collapse = " + ")))
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:25])
pr.nn <- pr.nn$net.result*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
test.cv.r <- (test.cv$classnotckd)*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
pbar$step()
}
mean(cv.error)
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
f <- as.formula(paste("classnotckd ~", paste(n[!n %in% "classnotckd"], collapse = " + ")))
f
#nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
#pr.nn <- compute(nn,test.cv[,1:25])
#pr.nn <- pr.nn$net.result*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
#test.cv.r <- (test.cv$classnotckd)*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
#cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
pbar$step()
}
f <- as.formula(paste("classnotckd ~", paste(n[!n %in% "classnotckd"], collapse = " + ")))
f
ckd <- read.csv("original_complete_cases_numeric_scaled.csv", stringsAsFactors = TRUE)
#convert factors to numeric by changing them into new columns
converted_to_numeric_column <- model.matrix(~age+bp+sg+al+su+rbc+pc+pcc+ba+bgr+bu+sc+sod+pot+hemo+pcv+wc+rc+htn+dm+cad+appet+pe+ane+class+0, ckd)
head(converted_to_numeric_column)
#save the transformed data to a file
write.csv(converted_to_numeric_column, file = "transformed_data.csv",row.names=FALSE)
data = read.csv('transformed_data.csv')
library(neuralnet)
#boot is used for crossvalidation
library(boot)
set.seed(769)
cv.error <- NULL
k <- 10
library(plyr)
pbar <- create_progress_bar('text')
pbar$init(k)
f <- as.formula(paste("classnotckd ~", paste(n[!n %in% "classnotckd"], collapse = " + ")))
f
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:25])
pr.nn <- pr.nn$net.result*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
test.cv.r <- (test.cv$classnotckd)*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
pbar$step()
}
mean(cv.error)
library(neuralnet)
#boot is used for crossvalidation
library(boot)
set.seed(769)
cv.error <- NULL
k <- 10
library(plyr)
pbar <- create_progress_bar('text')
pbar$init(k)
f <- as.formula(paste("classnotckd ~", paste(n[!n %in% "classnotckd"], collapse = " + ")))
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
#nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
#pr.nn <- compute(nn,test.cv[,1:25])
#pr.nn <- pr.nn$net.result*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
#test.cv.r <- (test.cv$classnotckd)*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
#cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
pbar$step()
}
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
#pr.nn <- compute(nn,test.cv[,1:25])
#pr.nn <- pr.nn$net.result*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
#test.cv.r <- (test.cv$classnotckd)*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
#cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
pbar$step()
}
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:25])
#pr.nn <- pr.nn$net.result*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
#test.cv.r <- (test.cv$classnotckd)*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
#cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
pbar$step()
}
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:25])
pr.nn <- pr.nn$net.result*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
#test.cv.r <- (test.cv$classnotckd)*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
#cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
pbar$step()
}
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:25])
pr.nn <- pr.nn$net.result*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
test.cv.r <- (test.cv$classnotckd)*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
#cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
pbar$step()
}
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:25])
pr.nn <- pr.nn$net.result*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
test.cv.r <- (test.cv$classnotckd)*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
pbar$step()
}
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:25])
pr.nn <- pr.nn$net.result*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
test.cv.r <- (test.cv$classnotckd)*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
pbar$step()
}
mean(cv.error)
str(data)
library(boot)
set.seed(769)
cv.error <- NULL
k <- 10
library(plyr)
pbar <- create_progress_bar('text')
pbar$init(k)
f <- as.formula(paste("classnotckd ~", paste(n[!n %in% "classnotckd"], collapse = " + ")))
#for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
test.cv$classnotckd
summary(test.cv$classnotckd)
str(test.cv$classnotckd)
test.cv
str(test.cv)
str(train.cv)
library(boot)
set.seed(769)
cv.error <- NULL
k <- 10
library(plyr)
pbar <- create_progress_bar('text')
pbar$init(k)
f <- as.formula(paste("classnotckd ~", paste(n[!n %in% "classnotckd"], collapse = " + ")))
#for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:25])
pr.nn <- pr.nn$net.result #*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
cor(pr.nn, test.cv$classnotckd)
library(neuralnet)
#boot is used for crossvalidation
library(boot)
set.seed(769)
cv.error <- NULL
k <- 10
library(plyr)
pbar <- create_progress_bar('text')
pbar$init(k)
f <- as.formula(paste("classnotckd ~", paste(n[!n %in% "classnotckd"], collapse = " + ")))
nn_model.cor = NULL
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:25])
pr.nn <- pr.nn$net.result #*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
nn_model.cor[i] <- cor(pr.nn, test.cv$classnotckd)
#test.cv.r <- (test.cv$classnotckd)*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
pbar$step()
}
mean(cv.error)
nn_model.cor
mean(nn_model.cor)
mean(cv.error)
#XXXXXXXXXXXXXX LOAD NEURALNT PACKAGE XXXXXXXXXXXXXX
library(neuralnet)
#boot is used for crossvalidation
library(boot)
set.seed(769)
cv.error <- NULL
k <- 10
library(plyr)
pbar <- create_progress_bar('text')
pbar$init(k)
f <- as.formula(paste("classnotckd ~", paste(n[!n %in% "classnotckd"], collapse = " + ")))
nn_model.cor = NULL
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:25])
pr.nn <- pr.nn$net.result #*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
nn_model.cor[i] <- cor(pr.nn, test.cv$classnotckd)
#test.cv.r <- (test.cv$classnotckd)*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
pbar$step()
}
mean(cv.error)
library(neuralnet)
#boot is used for crossvalidation
library(boot)
set.seed(769)
cv.error <- NULL
k <- 10
library(plyr)
pbar <- create_progress_bar('text')
pbar$init(k)
f <- as.formula(paste("classnotckd ~", paste(n[!n %in% "classnotckd"], collapse = " + ")))
nn_model.cor = NULL
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:25])
pr.nn <- pr.nn$net.result #*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
nn_model.cor[i] <- cor(pr.nn, test.cv$classnotckd)
#test.cv.r <- (test.cv$classnotckd)*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
#Save the data to files
train.cv$type = 'train'
test.cv$type = 'test'
write.csv(merge(train.cv, test.cv), file = i + " - fold.csv",row.names=FALSE)
pbar$step()
}
#XXXXXXXXXXXXXX LOAD NEURALNT PACKAGE XXXXXXXXXXXXXX
library(neuralnet)
#boot is used for crossvalidation
library(boot)
set.seed(769)
cv.error <- NULL
k <- 10
library(plyr)
pbar <- create_progress_bar('text')
pbar$init(k)
f <- as.formula(paste("classnotckd ~", paste(n[!n %in% "classnotckd"], collapse = " + ")))
nn_model.cor = NULL
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:25])
pr.nn <- pr.nn$net.result #*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
nn_model.cor[i] <- cor(pr.nn, test.cv$classnotckd)
#test.cv.r <- (test.cv$classnotckd)*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
#Save the data to files
train.cv$type = 'train'
test.cv$type = 'test'
write.csv(merge(train.cv, test.cv), file = paste(i + " - fold.csv"),row.names=FALSE)
pbar$step()
}
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:25])
pr.nn <- pr.nn$net.result #*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
nn_model.cor[i] <- cor(pr.nn, test.cv$classnotckd)
#test.cv.r <- (test.cv$classnotckd)*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
#Save the data to files
train.cv$type = 'train'
test.cv$type = 'test'
write.csv(merge(train.cv, test.cv), file = paste(i , " - fold.csv"),row.names=FALSE)
pbar$step()
}
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:25])
pr.nn <- pr.nn$net.result #*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
nn_model.cor[i] <- cor(pr.nn, test.cv$classnotckd)
#test.cv.r <- (test.cv$classnotckd)*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
#Save the data to files
train.cv$type = 'train'
test.cv$type = 'test'
write.csv(merge(train.cv, test.cv), file = paste("./10-fold-data/",i , " - fold.csv"),row.names=FALSE)
pbar$step()
}
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:25])
pr.nn <- pr.nn$net.result #*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
nn_model.cor[i] <- cor(pr.nn, test.cv$classnotckd)
#test.cv.r <- (test.cv$classnotckd)*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
#Save the data to files
#train.cv$type = 'train'
#test.cv$type = 'test'
write.csv(train.cv, file = paste("./10-fold-data/",i , " - fold.csv"),row.names=FALSE)
pbar$step()
}
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:25])
pr.nn <- pr.nn$net.result #*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
nn_model.cor[i] <- cor(pr.nn, test.cv$classnotckd)
#test.cv.r <- (test.cv$classnotckd)*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
#Save the data to files
train.cv$type <- 'train'
test.cv$type <- 'test'
write.csv(merge.data.frame(train.cv$type, test.cv$type), file = paste("./10-fold-data/",i , " - fold.csv"),row.names=FALSE)
pbar$step()
}
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:25])
pr.nn <- pr.nn$net.result #*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
nn_model.cor[i] <- cor(pr.nn, test.cv$classnotckd)
#test.cv.r <- (test.cv$classnotckd)*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
#Save the data to files
train.cv$type <- 'train'
test.cv$type <- 'test'
write.csv(train.cv, file = paste("./10-fold-data/",i , " - fold.csv"),row.names=FALSE)
pbar$step()
}
for(i in 1:k){
index <- sample(1:nrow(data),round(0.9*nrow(data)))
train.cv <- data[index,]
test.cv <- data[-index,]
n <- names(train.cv)
nn <- neuralnet(f,data=train.cv,hidden=c(5,2),linear.output=T)
pr.nn <- compute(nn,test.cv[,1:25])
pr.nn <- pr.nn$net.result #*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
nn_model.cor[i] <- cor(pr.nn, test.cv$classnotckd)
#test.cv.r <- (test.cv$classnotckd)*(max(data$classnotckd)-min(data$classnotckd))+min(data$classnotckd)
cv.error[i] <- sum((test.cv.r - pr.nn)^2)/nrow(test.cv)
#plot(nn)
#Save the data to files
train.cv$type <- 'train'
test.cv$type <- 'test'
write.csv(rbind(train.cv, test.cv), file = paste("./10-fold-data/",i , " - fold.csv"),row.names=FALSE)
pbar$step()
}
